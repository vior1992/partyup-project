var cov_thtjuyk11=function(){var path="/Users/dani/Desktop/skylab/skylab-bootcamp-201809/staff/daniel-villegas/partyup/partyup-api/logic/index.js",hash="10c66cce300c7ea58589060d35f640eada046d4d",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/dani/Desktop/skylab/skylab-bootcamp-201809/staff/daniel-villegas/partyup/partyup-api/logic/index.js",statementMap:{"0":{start:{line:1,column:50},end:{line:1,column:73}},"1":{start:{line:2,column:22},end:{line:2,column:54}},"2":{start:{line:3,column:69},end:{line:3,column:89}},"3":{start:{line:4,column:19},end:{line:4,column:40}},"4":{start:{line:5,column:13},end:{line:5,column:30}},"5":{start:{line:7,column:0},end:{line:11,column:2}},"6":{start:{line:13,column:14},end:{line:633,column:1}},"7":{start:{line:24,column:8},end:{line:34,column:10}},"8":{start:{line:25,column:12},end:{line:25,column:99}},"9":{start:{line:25,column:49},end:{line:25,column:99}},"10":{start:{line:27,column:12},end:{line:33,column:14}},"11":{start:{line:28,column:16},end:{line:32,column:18}},"12":{start:{line:29,column:20},end:{line:29,column:47}},"13":{start:{line:29,column:29},end:{line:29,column:47}},"14":{start:{line:31,column:20},end:{line:31,column:37}},"15":{start:{line:54,column:8},end:{line:60,column:10}},"16":{start:{line:62,column:8},end:{line:70,column:12}},"17":{start:{line:63,column:23},end:{line:63,column:55}},"18":{start:{line:65,column:12},end:{line:65,column:89}},"19":{start:{line:65,column:22},end:{line:65,column:89}},"20":{start:{line:67,column:12},end:{line:67,column:72}},"21":{start:{line:69,column:12},end:{line:69,column:29}},"22":{start:{line:87,column:8},end:{line:90,column:10}},"23":{start:{line:92,column:8},end:{line:98,column:12}},"24":{start:{line:93,column:25},end:{line:93,column:57}},"25":{start:{line:95,column:12},end:{line:95,column:104}},"26":{start:{line:95,column:53},end:{line:95,column:104}},"27":{start:{line:97,column:12},end:{line:97,column:26}},"28":{start:{line:114,column:8},end:{line:114,column:63}},"29":{start:{line:115,column:8},end:{line:123,column:12}},"30":{start:{line:116,column:25},end:{line:116,column:90}},"31":{start:{line:118,column:12},end:{line:118,column:64}},"32":{start:{line:118,column:23},end:{line:118,column:64}},"33":{start:{line:120,column:12},end:{line:120,column:24}},"34":{start:{line:122,column:12},end:{line:122,column:23}},"35":{start:{line:139,column:8},end:{line:139,column:71}},"36":{start:{line:141,column:21},end:{line:141,column:55}},"37":{start:{line:143,column:8},end:{line:143,column:24}},"38":{start:{line:145,column:8},end:{line:145,column:23}},"39":{start:{line:147,column:8},end:{line:147,column:19}},"40":{start:{line:164,column:8},end:{line:167,column:10}},"41":{start:{line:169,column:21},end:{line:169,column:48}},"42":{start:{line:171,column:8},end:{line:171,column:78}},"43":{start:{line:171,column:19},end:{line:171,column:78}},"44":{start:{line:173,column:32},end:{line:173,column:61}},"45":{start:{line:175,column:8},end:{line:175,column:37}},"46":{start:{line:177,column:8},end:{line:177,column:26}},"47":{start:{line:193,column:8},end:{line:193,column:71}},"48":{start:{line:196,column:25},end:{line:196,column:66}},"49":{start:{line:197,column:8},end:{line:201,column:9}},"50":{start:{line:198,column:12},end:{line:200,column:14}},"51":{start:{line:199,column:16},end:{line:199,column:69}},"52":{start:{line:203,column:29},end:{line:203,column:65}},"53":{start:{line:206,column:8},end:{line:213,column:14}},"54":{start:{line:207,column:12},end:{line:213,column:14}},"55":{start:{line:208,column:33},end:{line:208,column:82}},"56":{start:{line:210,column:16},end:{line:212,column:18}},"57":{start:{line:211,column:20},end:{line:211,column:67}},"58":{start:{line:216,column:8},end:{line:221,column:14}},"59":{start:{line:218,column:16},end:{line:220,column:18}},"60":{start:{line:219,column:20},end:{line:219,column:64}},"61":{start:{line:224,column:8},end:{line:227,column:14}},"62":{start:{line:225,column:12},end:{line:227,column:14}},"63":{start:{line:226,column:16},end:{line:226,column:64}},"64":{start:{line:230,column:21},end:{line:230,column:57}},"65":{start:{line:253,column:8},end:{line:262,column:10}},"66":{start:{line:264,column:28},end:{line:264,column:61}},"67":{start:{line:265,column:31},end:{line:265,column:60}},"68":{start:{line:267,column:8},end:{line:267,column:96}},"69":{start:{line:267,column:46},end:{line:267,column:96}},"70":{start:{line:269,column:8},end:{line:285,column:12}},"71":{start:{line:270,column:25},end:{line:270,column:52}},"72":{start:{line:272,column:12},end:{line:272,column:61}},"73":{start:{line:272,column:23},end:{line:272,column:61}},"74":{start:{line:274,column:31},end:{line:274,column:37}},"75":{start:{line:276,column:28},end:{line:276,column:115}},"76":{start:{line:279,column:12},end:{line:282,column:13}},"77":{start:{line:280,column:40},end:{line:280,column:69}},"78":{start:{line:281,column:16},end:{line:281,column:49}},"79":{start:{line:284,column:12},end:{line:284,column:32}},"80":{start:{line:301,column:8},end:{line:301,column:69}},"81":{start:{line:303,column:24},end:{line:303,column:52}},"82":{start:{line:305,column:8},end:{line:305,column:22}},"83":{start:{line:321,column:8},end:{line:321,column:77}},"84":{start:{line:323,column:24},end:{line:323,column:99}},"85":{start:{line:325,column:8},end:{line:325,column:87}},"86":{start:{line:325,column:22},end:{line:325,column:87}},"87":{start:{line:327,column:8},end:{line:327,column:41}},"88":{start:{line:329,column:8},end:{line:329,column:22}},"89":{start:{line:348,column:8},end:{line:351,column:10}},"90":{start:{line:353,column:8},end:{line:353,column:77}},"91":{start:{line:353,column:18},end:{line:353,column:77}},"92":{start:{line:355,column:8},end:{line:355,column:77}},"93":{start:{line:355,column:18},end:{line:355,column:77}},"94":{start:{line:357,column:8},end:{line:377,column:12}},"95":{start:{line:358,column:23},end:{line:360,column:13}},"96":{start:{line:362,column:12},end:{line:362,column:38}},"97":{start:{line:362,column:22},end:{line:362,column:38}},"98":{start:{line:363,column:12},end:{line:363,column:38}},"99":{start:{line:363,column:22},end:{line:363,column:38}},"100":{start:{line:365,column:29},end:{line:369,column:43}},"101":{start:{line:371,column:12},end:{line:374,column:14}},"102":{start:{line:372,column:16},end:{line:372,column:51}},"103":{start:{line:373,column:16},end:{line:373,column:34}},"104":{start:{line:376,column:12},end:{line:376,column:27}},"105":{start:{line:393,column:8},end:{line:393,column:71}},"106":{start:{line:395,column:8},end:{line:404,column:12}},"107":{start:{line:396,column:29},end:{line:396,column:120}},"108":{start:{line:398,column:12},end:{line:401,column:14}},"109":{start:{line:399,column:16},end:{line:399,column:51}},"110":{start:{line:400,column:16},end:{line:400,column:34}},"111":{start:{line:403,column:12},end:{line:403,column:27}},"112":{start:{line:420,column:8},end:{line:420,column:71}},"113":{start:{line:422,column:8},end:{line:431,column:12}},"114":{start:{line:423,column:29},end:{line:423,column:117}},"115":{start:{line:425,column:12},end:{line:428,column:14}},"116":{start:{line:426,column:16},end:{line:426,column:51}},"117":{start:{line:427,column:16},end:{line:427,column:34}},"118":{start:{line:430,column:12},end:{line:430,column:27}},"119":{start:{line:448,column:8},end:{line:451,column:10}},"120":{start:{line:453,column:8},end:{line:463,column:12}},"121":{start:{line:454,column:28},end:{line:454,column:61}},"122":{start:{line:456,column:31},end:{line:456,column:79}},"123":{start:{line:456,column:63},end:{line:456,column:78}},"124":{start:{line:458,column:12},end:{line:458,column:98}},"125":{start:{line:458,column:48},end:{line:458,column:98}},"126":{start:{line:460,column:12},end:{line:460,column:43}},"127":{start:{line:462,column:12},end:{line:462,column:33}},"128":{start:{line:480,column:8},end:{line:483,column:10}},"129":{start:{line:485,column:8},end:{line:496,column:12}},"130":{start:{line:486,column:28},end:{line:486,column:61}},"131":{start:{line:488,column:33},end:{line:491,column:14}},"132":{start:{line:489,column:16},end:{line:489,column:31}},"133":{start:{line:490,column:16},end:{line:490,column:38}},"134":{start:{line:493,column:12},end:{line:493,column:45}},"135":{start:{line:495,column:12},end:{line:495,column:33}},"136":{start:{line:513,column:8},end:{line:516,column:10}},"137":{start:{line:517,column:8},end:{line:537,column:12}},"138":{start:{line:519,column:29},end:{line:519,column:74}},"139":{start:{line:521,column:12},end:{line:527,column:13}},"140":{start:{line:522,column:16},end:{line:526,column:18}},"141":{start:{line:523,column:20},end:{line:523,column:77}},"142":{start:{line:525,column:37},end:{line:525,column:93}},"143":{start:{line:530,column:28},end:{line:530,column:61}},"144":{start:{line:532,column:12},end:{line:534,column:58}},"145":{start:{line:534,column:16},end:{line:534,column:58}},"146":{start:{line:536,column:29},end:{line:536,column:71}},"147":{start:{line:555,column:8},end:{line:559,column:10}},"148":{start:{line:561,column:8},end:{line:565,column:12}},"149":{start:{line:562,column:31},end:{line:562,column:95}},"150":{start:{line:564,column:12},end:{line:564,column:35}},"151":{start:{line:581,column:8},end:{line:581,column:77}},"152":{start:{line:583,column:8},end:{line:600,column:12}},"153":{start:{line:584,column:29},end:{line:584,column:135}},"154":{start:{line:586,column:12},end:{line:586,column:100}},"155":{start:{line:586,column:27},end:{line:586,column:100}},"156":{start:{line:588,column:12},end:{line:598,column:14}},"157":{start:{line:589,column:16},end:{line:592,column:17}},"158":{start:{line:590,column:20},end:{line:590,column:65}},"159":{start:{line:591,column:20},end:{line:591,column:43}},"160":{start:{line:594,column:16},end:{line:594,column:51}},"161":{start:{line:595,column:16},end:{line:595,column:34}},"162":{start:{line:597,column:16},end:{line:597,column:60}},"163":{start:{line:599,column:12},end:{line:599,column:27}},"164":{start:{line:618,column:8},end:{line:621,column:10}},"165":{start:{line:623,column:8},end:{line:631,column:12}},"166":{start:{line:624,column:28},end:{line:624,column:64}},"167":{start:{line:626,column:12},end:{line:630,column:13}},"168":{start:{line:627,column:16},end:{line:627,column:62}},"169":{start:{line:629,column:33},end:{line:629,column:79}},"170":{start:{line:635,column:0},end:{line:635,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:23,column:4},end:{line:23,column:5}},loc:{start:{line:23,column:28},end:{line:35,column:5}},line:23},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:38},end:{line:24,column:39}},loc:{start:{line:24,column:44},end:{line:34,column:9}},line:24},"2":{name:"(anonymous_2)",decl:{start:{line:27,column:31},end:{line:27,column:32}},loc:{start:{line:27,column:52},end:{line:33,column:13}},line:27},"3":{name:"(anonymous_3)",decl:{start:{line:28,column:66},end:{line:28,column:67}},loc:{start:{line:28,column:87},end:{line:32,column:17}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:53,column:4},end:{line:53,column:5}},loc:{start:{line:53,column:58},end:{line:71,column:5}},line:53},"5":{name:"(anonymous_5)",decl:{start:{line:62,column:16},end:{line:62,column:17}},loc:{start:{line:62,column:28},end:{line:70,column:9}},line:62},"6":{name:"(anonymous_6)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:41},end:{line:99,column:5}},line:86},"7":{name:"(anonymous_7)",decl:{start:{line:92,column:16},end:{line:92,column:17}},loc:{start:{line:92,column:28},end:{line:98,column:9}},line:92},"8":{name:"(anonymous_8)",decl:{start:{line:113,column:4},end:{line:113,column:5}},loc:{start:{line:113,column:27},end:{line:124,column:5}},line:113},"9":{name:"(anonymous_9)",decl:{start:{line:115,column:16},end:{line:115,column:17}},loc:{start:{line:115,column:28},end:{line:123,column:9}},line:115},"10":{name:"(anonymous_10)",decl:{start:{line:138,column:4},end:{line:138,column:5}},loc:{start:{line:138,column:33},end:{line:148,column:5}},line:138},"11":{name:"(anonymous_11)",decl:{start:{line:163,column:4},end:{line:163,column:5}},loc:{start:{line:163,column:39},end:{line:178,column:5}},line:163},"12":{name:"(anonymous_12)",decl:{start:{line:192,column:4},end:{line:192,column:5}},loc:{start:{line:192,column:29},end:{line:231,column:5}},line:192},"13":{name:"(anonymous_13)",decl:{start:{line:198,column:25},end:{line:198,column:26}},loc:{start:{line:198,column:37},end:{line:200,column:13}},line:198},"14":{name:"(anonymous_14)",decl:{start:{line:207,column:33},end:{line:207,column:34}},loc:{start:{line:207,column:52},end:{line:213,column:13}},line:207},"15":{name:"(anonymous_15)",decl:{start:{line:210,column:33},end:{line:210,column:34}},loc:{start:{line:210,column:52},end:{line:212,column:17}},line:210},"16":{name:"(anonymous_16)",decl:{start:{line:217,column:18},end:{line:217,column:19}},loc:{start:{line:217,column:30},end:{line:221,column:13}},line:217},"17":{name:"(anonymous_17)",decl:{start:{line:218,column:33},end:{line:218,column:34}},loc:{start:{line:218,column:44},end:{line:220,column:17}},line:218},"18":{name:"(anonymous_18)",decl:{start:{line:225,column:29},end:{line:225,column:30}},loc:{start:{line:225,column:41},end:{line:227,column:13}},line:225},"19":{name:"(anonymous_19)",decl:{start:{line:252,column:4},end:{line:252,column:5}},loc:{start:{line:252,column:78},end:{line:286,column:5}},line:252},"20":{name:"(anonymous_20)",decl:{start:{line:269,column:16},end:{line:269,column:17}},loc:{start:{line:269,column:28},end:{line:285,column:9}},line:269},"21":{name:"(anonymous_21)",decl:{start:{line:300,column:4},end:{line:300,column:5}},loc:{start:{line:300,column:35},end:{line:306,column:5}},line:300},"22":{name:"(anonymous_22)",decl:{start:{line:320,column:4},end:{line:320,column:5}},loc:{start:{line:320,column:39},end:{line:330,column:5}},line:320},"23":{name:"(anonymous_23)",decl:{start:{line:347,column:4},end:{line:347,column:5}},loc:{start:{line:347,column:44},end:{line:378,column:5}},line:347},"24":{name:"(anonymous_24)",decl:{start:{line:357,column:16},end:{line:357,column:17}},loc:{start:{line:357,column:28},end:{line:377,column:9}},line:357},"25":{name:"(anonymous_25)",decl:{start:{line:371,column:29},end:{line:371,column:30}},loc:{start:{line:371,column:40},end:{line:374,column:13}},line:371},"26":{name:"(anonymous_26)",decl:{start:{line:392,column:4},end:{line:392,column:5}},loc:{start:{line:392,column:34},end:{line:405,column:5}},line:392},"27":{name:"(anonymous_27)",decl:{start:{line:395,column:16},end:{line:395,column:17}},loc:{start:{line:395,column:28},end:{line:404,column:9}},line:395},"28":{name:"(anonymous_28)",decl:{start:{line:398,column:29},end:{line:398,column:30}},loc:{start:{line:398,column:40},end:{line:401,column:13}},line:398},"29":{name:"(anonymous_29)",decl:{start:{line:419,column:4},end:{line:419,column:5}},loc:{start:{line:419,column:32},end:{line:432,column:5}},line:419},"30":{name:"(anonymous_30)",decl:{start:{line:422,column:16},end:{line:422,column:17}},loc:{start:{line:422,column:28},end:{line:431,column:9}},line:422},"31":{name:"(anonymous_31)",decl:{start:{line:425,column:29},end:{line:425,column:30}},loc:{start:{line:425,column:40},end:{line:428,column:13}},line:425},"32":{name:"(anonymous_32)",decl:{start:{line:447,column:4},end:{line:447,column:5}},loc:{start:{line:447,column:39},end:{line:464,column:5}},line:447},"33":{name:"(anonymous_33)",decl:{start:{line:453,column:16},end:{line:453,column:17}},loc:{start:{line:453,column:28},end:{line:463,column:9}},line:453},"34":{name:"(anonymous_34)",decl:{start:{line:456,column:55},end:{line:456,column:56}},loc:{start:{line:456,column:63},end:{line:456,column:78}},line:456},"35":{name:"(anonymous_35)",decl:{start:{line:479,column:4},end:{line:479,column:5}},loc:{start:{line:479,column:42},end:{line:497,column:5}},line:479},"36":{name:"(anonymous_36)",decl:{start:{line:485,column:16},end:{line:485,column:17}},loc:{start:{line:485,column:28},end:{line:496,column:9}},line:485},"37":{name:"(anonymous_37)",decl:{start:{line:488,column:59},end:{line:488,column:60}},loc:{start:{line:488,column:67},end:{line:491,column:13}},line:488},"38":{name:"(anonymous_38)",decl:{start:{line:512,column:4},end:{line:512,column:5}},loc:{start:{line:512,column:37},end:{line:538,column:5}},line:512},"39":{name:"(anonymous_39)",decl:{start:{line:517,column:16},end:{line:517,column:17}},loc:{start:{line:517,column:28},end:{line:537,column:9}},line:517},"40":{name:"(anonymous_40)",decl:{start:{line:522,column:29},end:{line:522,column:30}},loc:{start:{line:522,column:41},end:{line:526,column:17}},line:522},"41":{name:"(anonymous_41)",decl:{start:{line:554,column:4},end:{line:554,column:5}},loc:{start:{line:554,column:44},end:{line:566,column:5}},line:554},"42":{name:"(anonymous_42)",decl:{start:{line:561,column:16},end:{line:561,column:17}},loc:{start:{line:561,column:28},end:{line:565,column:9}},line:561},"43":{name:"(anonymous_43)",decl:{start:{line:580,column:4},end:{line:580,column:5}},loc:{start:{line:580,column:32},end:{line:601,column:5}},line:580},"44":{name:"(anonymous_44)",decl:{start:{line:583,column:16},end:{line:583,column:17}},loc:{start:{line:583,column:28},end:{line:600,column:9}},line:583},"45":{name:"(anonymous_45)",decl:{start:{line:588,column:29},end:{line:588,column:30}},loc:{start:{line:588,column:40},end:{line:598,column:13}},line:588},"46":{name:"(anonymous_46)",decl:{start:{line:616,column:4},end:{line:616,column:5}},loc:{start:{line:616,column:37},end:{line:632,column:5}},line:616},"47":{name:"(anonymous_47)",decl:{start:{line:623,column:16},end:{line:623,column:17}},loc:{start:{line:623,column:28},end:{line:631,column:9}},line:623}},branchMap:{"0":{loc:{start:{line:25,column:12},end:{line:25,column:99}},type:"if",locations:[{start:{line:25,column:12},end:{line:25,column:99}},{start:{line:25,column:12},end:{line:25,column:99}}],line:25},"1":{loc:{start:{line:29,column:20},end:{line:29,column:47}},type:"if",locations:[{start:{line:29,column:20},end:{line:29,column:47}},{start:{line:29,column:20},end:{line:29,column:47}}],line:29},"2":{loc:{start:{line:65,column:12},end:{line:65,column:89}},type:"if",locations:[{start:{line:65,column:12},end:{line:65,column:89}},{start:{line:65,column:12},end:{line:65,column:89}}],line:65},"3":{loc:{start:{line:95,column:12},end:{line:95,column:104}},type:"if",locations:[{start:{line:95,column:12},end:{line:95,column:104}},{start:{line:95,column:12},end:{line:95,column:104}}],line:95},"4":{loc:{start:{line:95,column:16},end:{line:95,column:51}},type:"binary-expr",locations:[{start:{line:95,column:16},end:{line:95,column:21}},{start:{line:95,column:25},end:{line:95,column:51}}],line:95},"5":{loc:{start:{line:118,column:12},end:{line:118,column:64}},type:"if",locations:[{start:{line:118,column:12},end:{line:118,column:64}},{start:{line:118,column:12},end:{line:118,column:64}}],line:118},"6":{loc:{start:{line:171,column:8},end:{line:171,column:78}},type:"if",locations:[{start:{line:171,column:8},end:{line:171,column:78}},{start:{line:171,column:8},end:{line:171,column:78}}],line:171},"7":{loc:{start:{line:197,column:8},end:{line:201,column:9}},type:"if",locations:[{start:{line:197,column:8},end:{line:201,column:9}},{start:{line:197,column:8},end:{line:201,column:9}}],line:197},"8":{loc:{start:{line:206,column:8},end:{line:213,column:14}},type:"if",locations:[{start:{line:206,column:8},end:{line:213,column:14}},{start:{line:206,column:8},end:{line:213,column:14}}],line:206},"9":{loc:{start:{line:224,column:8},end:{line:227,column:14}},type:"if",locations:[{start:{line:224,column:8},end:{line:227,column:14}},{start:{line:224,column:8},end:{line:227,column:14}}],line:224},"10":{loc:{start:{line:267,column:8},end:{line:267,column:96}},type:"if",locations:[{start:{line:267,column:8},end:{line:267,column:96}},{start:{line:267,column:8},end:{line:267,column:96}}],line:267},"11":{loc:{start:{line:272,column:12},end:{line:272,column:61}},type:"if",locations:[{start:{line:272,column:12},end:{line:272,column:61}},{start:{line:272,column:12},end:{line:272,column:61}}],line:272},"12":{loc:{start:{line:279,column:12},end:{line:282,column:13}},type:"if",locations:[{start:{line:279,column:12},end:{line:282,column:13}},{start:{line:279,column:12},end:{line:282,column:13}}],line:279},"13":{loc:{start:{line:325,column:8},end:{line:325,column:87}},type:"if",locations:[{start:{line:325,column:8},end:{line:325,column:87}},{start:{line:325,column:8},end:{line:325,column:87}}],line:325},"14":{loc:{start:{line:353,column:8},end:{line:353,column:77}},type:"if",locations:[{start:{line:353,column:8},end:{line:353,column:77}},{start:{line:353,column:8},end:{line:353,column:77}}],line:353},"15":{loc:{start:{line:355,column:8},end:{line:355,column:77}},type:"if",locations:[{start:{line:355,column:8},end:{line:355,column:77}},{start:{line:355,column:8},end:{line:355,column:77}}],line:355},"16":{loc:{start:{line:362,column:12},end:{line:362,column:38}},type:"if",locations:[{start:{line:362,column:12},end:{line:362,column:38}},{start:{line:362,column:12},end:{line:362,column:38}}],line:362},"17":{loc:{start:{line:363,column:12},end:{line:363,column:38}},type:"if",locations:[{start:{line:363,column:12},end:{line:363,column:38}},{start:{line:363,column:12},end:{line:363,column:38}}],line:363},"18":{loc:{start:{line:458,column:12},end:{line:458,column:98}},type:"if",locations:[{start:{line:458,column:12},end:{line:458,column:98}},{start:{line:458,column:12},end:{line:458,column:98}}],line:458},"19":{loc:{start:{line:521,column:12},end:{line:527,column:13}},type:"if",locations:[{start:{line:521,column:12},end:{line:527,column:13}},{start:{line:521,column:12},end:{line:527,column:13}}],line:521},"20":{loc:{start:{line:532,column:12},end:{line:534,column:58}},type:"if",locations:[{start:{line:532,column:12},end:{line:534,column:58}},{start:{line:532,column:12},end:{line:534,column:58}}],line:532},"21":{loc:{start:{line:586,column:12},end:{line:586,column:100}},type:"if",locations:[{start:{line:586,column:12},end:{line:586,column:100}},{start:{line:586,column:12},end:{line:586,column:100}}],line:586},"22":{loc:{start:{line:589,column:16},end:{line:592,column:17}},type:"if",locations:[{start:{line:589,column:16},end:{line:592,column:17}},{start:{line:589,column:16},end:{line:592,column:17}}],line:589},"23":{loc:{start:{line:626,column:12},end:{line:630,column:13}},type:"if",locations:[{start:{line:626,column:12},end:{line:630,column:13}},{start:{line:626,column:12},end:{line:630,column:13}}],line:626}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const{models:{User,Partyup,Commentary}}=(cov_thtjuyk11.s[0]++,require('partyup-data'));const validateLogic=(cov_thtjuyk11.s[1]++,require('../utilities/validate'));const{AlreadyExistsError,AuthError,NotFoundError,ValueError}=(cov_thtjuyk11.s[2]++,require('../errors'));const cloudinary=(cov_thtjuyk11.s[3]++,require('cloudinary'));var moment=(cov_thtjuyk11.s[4]++,require('moment'));cov_thtjuyk11.s[5]++;cloudinary.config({cloud_name:'vior1992',api_key:'193425753116639',api_secret:'xCezhtXMWcCFHWY8xB6W1m9feIs'});const logic=(cov_thtjuyk11.s[6]++,{/**
    * 
    * @param {string} base64Image 
    * 
    * @throws {Error} On not string base64image.
    * 
    * @returns {Promise} Resolves on correct data, rejects on wrong data.
    */_saveImage(base64Image){cov_thtjuyk11.f[0]++;cov_thtjuyk11.s[7]++;return Promise.resolve().then(()=>{cov_thtjuyk11.f[1]++;cov_thtjuyk11.s[8]++;if(typeof base64Image!=='string'){cov_thtjuyk11.b[0][0]++;cov_thtjuyk11.s[9]++;throw new TypeError('base64Image is not a string');}else{cov_thtjuyk11.b[0][1]++;}cov_thtjuyk11.s[10]++;return new Promise((resolve,reject)=>{cov_thtjuyk11.f[2]++;cov_thtjuyk11.s[11]++;return cloudinary.v2.uploader.upload(base64Image,function(err,data){cov_thtjuyk11.f[3]++;cov_thtjuyk11.s[12]++;if(err){cov_thtjuyk11.b[1][0]++;cov_thtjuyk11.s[13]++;return reject(err);}else{cov_thtjuyk11.b[1][1]++;}cov_thtjuyk11.s[14]++;resolve(data.url);});});});},/**
     * 
     * @param {string} name -> The name of the user.
     * @param {string} surname -> The surname of the user.
     * @param {string} city -> The city of the user.
     * @param {string} username -> The username of the user.
     * @param {string} passowrd -> The passowrd of the user.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */registerUser(name,surname,city,username,password){cov_thtjuyk11.f[4]++;cov_thtjuyk11.s[15]++;validateLogic([{key:'name',value:name,type:String},{key:'surname',value:surname,type:String},{key:'city',value:city,type:String},{key:'username',value:username,type:String},{key:'password',value:password,type:String}]);cov_thtjuyk11.s[16]++;return(async()=>{cov_thtjuyk11.f[5]++;let user=(cov_thtjuyk11.s[17]++,await User.findOne({username}));cov_thtjuyk11.s[18]++;if(user){cov_thtjuyk11.b[2][0]++;cov_thtjuyk11.s[19]++;throw new AlreadyExistsError(`username ${username} already exists`);}else{cov_thtjuyk11.b[2][1]++;}cov_thtjuyk11.s[20]++;user=new User({name,surname,city,username,password});cov_thtjuyk11.s[21]++;await user.save();})();},/**
     * 
     * @param {string} username -> The username of the user.
     * @param {string} passowrd -> The passowrd of the user.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */authenticateUser(username,password){cov_thtjuyk11.f[6]++;cov_thtjuyk11.s[22]++;validateLogic([{key:'username',value:username,type:String},{key:'password',value:password,type:String}]);cov_thtjuyk11.s[23]++;return(async()=>{cov_thtjuyk11.f[7]++;const user=(cov_thtjuyk11.s[24]++,await User.findOne({username}));cov_thtjuyk11.s[25]++;if((cov_thtjuyk11.b[4][0]++,!user)||(cov_thtjuyk11.b[4][1]++,user.password!==password)){cov_thtjuyk11.b[3][0]++;cov_thtjuyk11.s[26]++;throw new AuthError('Wrong credentials, try again');}else{cov_thtjuyk11.b[3][1]++;}cov_thtjuyk11.s[27]++;return user.id;})();},/**
     * 
     * @param {string} id -> The id of the user.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */retrieveLoggedUser(id){cov_thtjuyk11.f[8]++;cov_thtjuyk11.s[28]++;validateLogic([{key:'id',value:id,type:String}]);cov_thtjuyk11.s[29]++;return(async()=>{cov_thtjuyk11.f[9]++;const user=(cov_thtjuyk11.s[30]++,await User.findById(id,{'_id':0,password:0,__v:0}).lean());cov_thtjuyk11.s[31]++;if(!user){cov_thtjuyk11.b[5][0]++;cov_thtjuyk11.s[32]++;throw new NotFoundError(`user not found`);}else{cov_thtjuyk11.b[5][1]++;}cov_thtjuyk11.s[33]++;user.id=id;cov_thtjuyk11.s[34]++;return user;})();},/**
     * 
     * @param {string} userId -> The id of the user.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */async searchUserById(userId){cov_thtjuyk11.f[10]++;cov_thtjuyk11.s[35]++;validateLogic([{key:'userId',value:userId,type:String}]);const user=(cov_thtjuyk11.s[36]++,await User.findById(userId).lean());cov_thtjuyk11.s[37]++;user.id=userId;cov_thtjuyk11.s[38]++;delete user._id;cov_thtjuyk11.s[39]++;return user;},/**
     * 
     * @param {string} userId -> The id of the user.
     * @param {string} chunk -> The chunk of picture that has been upload to cloudinary.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */async addUserAvatar(userId,chunk){cov_thtjuyk11.f[11]++;cov_thtjuyk11.s[40]++;validateLogic([{key:'userId',value:userId,type:String},{key:'chunk',value:chunk,type:String}]);const user=(cov_thtjuyk11.s[41]++,await User.findById(userId));cov_thtjuyk11.s[42]++;if(!user){cov_thtjuyk11.b[6][0]++;cov_thtjuyk11.s[43]++;throw new NotFoundError(`user with id ${userId} not found`);}else{cov_thtjuyk11.b[6][1]++;}const imageCloudinary=(cov_thtjuyk11.s[44]++,await logic._saveImage(chunk));cov_thtjuyk11.s[45]++;user.avatar=imageCloudinary;cov_thtjuyk11.s[46]++;return user.save();},/**
     * 
     * @param {string} userId -> The id of the user.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */async deleteUser(userId){cov_thtjuyk11.f[12]++;cov_thtjuyk11.s[47]++;validateLogic([{key:'userId',value:userId,type:String}]);//DELETE COMMENTARIES OF USER
const comments=(cov_thtjuyk11.s[48]++,await Commentary.find({userId:userId}));cov_thtjuyk11.s[49]++;if(comments){cov_thtjuyk11.b[7][0]++;cov_thtjuyk11.s[50]++;comments.map(async()=>{cov_thtjuyk11.f[13]++;cov_thtjuyk11.s[51]++;await Commentary.findOneAndDelete({userId:userId});});}else{cov_thtjuyk11.b[7][1]++;}const userPartyups=(cov_thtjuyk11.s[52]++,await Partyup.find({user:userId}));//DELETE COMMENTARIES OF USER FROM PARTYUPS
cov_thtjuyk11.s[53]++;if(userPartyups){cov_thtjuyk11.b[8][0]++;cov_thtjuyk11.s[54]++;userPartyups.forEach(async partyup=>{cov_thtjuyk11.f[14]++;const comments=(cov_thtjuyk11.s[55]++,await Commentary.find({partyupId:partyup._id}));cov_thtjuyk11.s[56]++;comments.forEach(async comment=>{cov_thtjuyk11.f[15]++;cov_thtjuyk11.s[57]++;await Commentary.findByIdAndDelete(comment._id);});});}else{cov_thtjuyk11.b[8][1]++;}//DELETE ASSISTENCES OF USER FROM PARTYUPS
cov_thtjuyk11.s[58]++;logic.listPartyupsIAssist(userId).then(partyups=>{cov_thtjuyk11.f[16]++;cov_thtjuyk11.s[59]++;partyups.forEach(partyup=>{cov_thtjuyk11.f[17]++;cov_thtjuyk11.s[60]++;logic.notAssistToPartyup(userId,partyup.id);});});//DELETE ALL PARTYUPS OF USER
cov_thtjuyk11.s[61]++;if(userPartyups){cov_thtjuyk11.b[9][0]++;cov_thtjuyk11.s[62]++;userPartyups.map(async()=>{cov_thtjuyk11.f[18]++;cov_thtjuyk11.s[63]++;await Partyup.findOneAndDelete({user:userId});});}else{cov_thtjuyk11.b[9][1]++;}//DELETE USER
const user=(cov_thtjuyk11.s[64]++,await User.findByIdAndDelete(userId));},/**
     * 
     * @param {string} title -> The title of the partyup.
     * @param {string} description -> The description of the partyup.
     * @param {date} date -> The date of the partyup.
     * @param {string} city -> The city of the partyup.
     * @param {string} place -> The place of the partyup.
     * @param {string} tags -> The tags of the partyup.
     * @param {string} userId -> The userId of the partyup.
     * @param {string} image -> The image of the partyup (Optional).
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */createPartyup(title,description,date,city,place,tags,userId,image){cov_thtjuyk11.f[19]++;cov_thtjuyk11.s[65]++;validateLogic([{key:'title',value:title,type:String},{key:'description',value:description,type:String},{key:'date',value:date,type:Date},{key:'city',value:city,type:String},{key:'place',value:place,type:String},{key:'tags',value:tags,type:String},{key:'userId',value:userId,type:String},{key:'image',value:image,type:String,optional:true}]);const formateDate=(cov_thtjuyk11.s[66]++,moment(date).format('YYYY-MM-DD'));const formateNowDate=(cov_thtjuyk11.s[67]++,moment().format('YYYY-MM-DD'));cov_thtjuyk11.s[68]++;if(!(formateDate>=formateNowDate)){cov_thtjuyk11.b[10][0]++;cov_thtjuyk11.s[69]++;throw new ValueError(`Minimum date must be today`);}else{cov_thtjuyk11.b[10][1]++;}cov_thtjuyk11.s[70]++;return(async()=>{cov_thtjuyk11.f[20]++;const user=(cov_thtjuyk11.s[71]++,await User.findById(userId));cov_thtjuyk11.s[72]++;if(!user){cov_thtjuyk11.b[11][0]++;cov_thtjuyk11.s[73]++;throw new ValueError(`user not found`);}else{cov_thtjuyk11.b[11][1]++;}const assistants=(cov_thtjuyk11.s[74]++,userId);const partyup=(cov_thtjuyk11.s[75]++,new Partyup({title,description,date,city,place,tags,assistants,user:user.id}));cov_thtjuyk11.s[76]++;if(image){cov_thtjuyk11.b[12][0]++;const imageCloudinary=(cov_thtjuyk11.s[77]++,await logic._saveImage(image));cov_thtjuyk11.s[78]++;partyup.picture=imageCloudinary;}else{cov_thtjuyk11.b[12][1]++;}cov_thtjuyk11.s[79]++;await partyup.save();})();},/**
    * 
    * @param {string} image -> The chunk of picture that has been upload to cloudinary.
    * 
    * @throws {TypeError} On not string data.
    * @throws {Error} On empty or blank data.
    * @throws {TypeError} On not boolean data.
    * @throws {TypeError} On not number data.
    * @throws {TypeError} On not date data.
    * 
    * @returns {Promise} Resolves on correct data, rejects on wrong data.
    */async addPartyupPicture(image){cov_thtjuyk11.f[21]++;cov_thtjuyk11.s[80]++;validateLogic([{key:'image',value:image,type:String}]);const picture=(cov_thtjuyk11.s[81]++,await this._saveImage(image));cov_thtjuyk11.s[82]++;return picture;},/**
    * 
    * @param {string} partyupId -> The partyupId of the partyup.
    * 
    * @throws {TypeError} On not string data.
    * @throws {Error} On empty or blank data.
    * @throws {TypeError} On not boolean data.
    * @throws {TypeError} On not number data.
    * @throws {TypeError} On not date data.
    * 
    * @returns {Promise} Resolves on correct data, rejects on wrong data.
    */async searchPartyupById(partyupId){cov_thtjuyk11.f[22]++;cov_thtjuyk11.s[83]++;validateLogic([{key:'partyupId',value:partyupId,type:String}]);const partyup=(cov_thtjuyk11.s[84]++,await Partyup.findById(partyupId,{'_id':0,password:0,__v:0}).lean());cov_thtjuyk11.s[85]++;if(!partyup){cov_thtjuyk11.b[13][0]++;cov_thtjuyk11.s[86]++;throw new NotFoundError(`partyup with id ${partyupId} not found`);}else{cov_thtjuyk11.b[13][1]++;}cov_thtjuyk11.s[87]++;partyup.id=partyupId.toString();cov_thtjuyk11.s[88]++;return partyup;},/**
     * 
     * @param {number} perPage -> The items per page that will be listed
     * @param {number} page -> The pages that will be listed.
     * @param {string} city -> The city of the partyup.
     * @param {string} tags -> The partyupId of the partyup.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */listPartyups(perPage,page,city,tags){cov_thtjuyk11.f[23]++;cov_thtjuyk11.s[89]++;validateLogic([{key:'perPage',value:perPage,type:Number},{key:'page',value:page,type:Number}]);cov_thtjuyk11.s[90]++;if(city){cov_thtjuyk11.b[14][0]++;cov_thtjuyk11.s[91]++;validateLogic([{key:'city',value:city,type:String}]);}else{cov_thtjuyk11.b[14][1]++;}cov_thtjuyk11.s[92]++;if(tags){cov_thtjuyk11.b[15][0]++;cov_thtjuyk11.s[93]++;validateLogic([{key:'tags',value:tags,type:String}]);}else{cov_thtjuyk11.b[15][1]++;}cov_thtjuyk11.s[94]++;return(async()=>{cov_thtjuyk11.f[24]++;let find=(cov_thtjuyk11.s[95]++,{});cov_thtjuyk11.s[96]++;if(city){cov_thtjuyk11.b[16][0]++;cov_thtjuyk11.s[97]++;find.city=city;}else{cov_thtjuyk11.b[16][1]++;}cov_thtjuyk11.s[98]++;if(tags){cov_thtjuyk11.b[17][0]++;cov_thtjuyk11.s[99]++;find.tags=tags;}else{cov_thtjuyk11.b[17][1]++;}const partyups=(cov_thtjuyk11.s[100]++,await Partyup.find(find,{password:0,__v:0}).lean().sort({'date':+1}).limit(perPage).skip(perPage*(page-1)));cov_thtjuyk11.s[101]++;partyups.forEach(partyup=>{cov_thtjuyk11.f[25]++;cov_thtjuyk11.s[102]++;partyup.id=partyup._id.toString();cov_thtjuyk11.s[103]++;delete partyup._id;});cov_thtjuyk11.s[104]++;return partyups;})();},/**
     *
     * @param {string} userId -> The id of the user.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */listPartyupsCreatedBy(userId){cov_thtjuyk11.f[26]++;cov_thtjuyk11.s[105]++;validateLogic([{key:'userId',value:userId,type:String}]);cov_thtjuyk11.s[106]++;return(async()=>{cov_thtjuyk11.f[27]++;const partyups=(cov_thtjuyk11.s[107]++,await Partyup.find({user:userId},{description:0,user:0,tags:0,'__v':0}).lean());cov_thtjuyk11.s[108]++;partyups.forEach(partyup=>{cov_thtjuyk11.f[28]++;cov_thtjuyk11.s[109]++;partyup.id=partyup._id.toString();cov_thtjuyk11.s[110]++;delete partyup._id;});cov_thtjuyk11.s[111]++;return partyups;})();},/**
     *
     * @param {string} userId -> The id of the user.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */listPartyupsIAssist(userId){cov_thtjuyk11.f[29]++;cov_thtjuyk11.s[112]++;validateLogic([{key:'userId',value:userId,type:String}]);cov_thtjuyk11.s[113]++;return(async()=>{cov_thtjuyk11.f[30]++;const partyups=(cov_thtjuyk11.s[114]++,await Partyup.find({assistants:userId},{description:0,tags:0,'__v':0}).lean());cov_thtjuyk11.s[115]++;partyups.forEach(partyup=>{cov_thtjuyk11.f[31]++;cov_thtjuyk11.s[116]++;partyup.id=partyup._id.toString();cov_thtjuyk11.s[117]++;delete partyup._id;});cov_thtjuyk11.s[118]++;return partyups;})();},/**
     *
     * @param {string} userId -> The id of the user.
     * @param {string} partyupId -> The id of the partyup.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */assistToPartyup(userId,partyupId){cov_thtjuyk11.f[32]++;cov_thtjuyk11.s[119]++;validateLogic([{key:'userId',value:userId,type:String},{key:'partyupId',value:partyupId,type:String}]);cov_thtjuyk11.s[120]++;return(async()=>{cov_thtjuyk11.f[33]++;const partyup=(cov_thtjuyk11.s[121]++,await Partyup.findById(partyupId));const userAssist=(cov_thtjuyk11.s[122]++,partyup.assistants.find(user=>{cov_thtjuyk11.f[34]++;cov_thtjuyk11.s[123]++;return user===userId;}));cov_thtjuyk11.s[124]++;if(typeof userAssist==='string'){cov_thtjuyk11.b[18][0]++;cov_thtjuyk11.s[125]++;throw new ValueError('User is on assistance list');}else{cov_thtjuyk11.b[18][1]++;}cov_thtjuyk11.s[126]++;partyup.assistants.push(userId);cov_thtjuyk11.s[127]++;return partyup.save();})();},/**
    *
    * @param {string} userId -> The id of the user.
    * @param {string} partyupId -> The id of the partyup.
    * 
    * @throws {TypeError} On not string data.
    * @throws {Error} On empty or blank data.
    * @throws {TypeError} On not boolean data.
    * @throws {TypeError} On not number data.
    * @throws {TypeError} On not date data.
    * 
    * @returns {Promise} Resolves on correct data, rejects on wrong data.
    */notAssistToPartyup(userId,partyupId){cov_thtjuyk11.f[35]++;cov_thtjuyk11.s[128]++;validateLogic([{key:'userId',value:userId,type:String},{key:'partyupId',value:partyupId,type:String}]);cov_thtjuyk11.s[129]++;return(async()=>{cov_thtjuyk11.f[36]++;const partyup=(cov_thtjuyk11.s[130]++,await Partyup.findById(partyupId));const userNoAssist=(cov_thtjuyk11.s[131]++,partyup.assistants.filter(user=>{cov_thtjuyk11.f[37]++;cov_thtjuyk11.s[132]++;user===userId;cov_thtjuyk11.s[133]++;return user!==userId;}));cov_thtjuyk11.s[134]++;partyup.assistants=userNoAssist;cov_thtjuyk11.s[135]++;return partyup.save();})();},/**
    *
    * @param {string} userId -> The id of the user.
    * @param {string} partyupId -> The id of the partyup.
    * 
    * @throws {TypeError} On not string data.
    * @throws {Error} On empty or blank data.
    * @throws {TypeError} On not boolean data.
    * @throws {TypeError} On not number data.
    * @throws {TypeError} On not date data.
    * 
    * @returns {Promise} Resolves on correct data, rejects on wrong data.
    */deletePartyup(userId,partyupId){cov_thtjuyk11.f[38]++;cov_thtjuyk11.s[136]++;validateLogic([{key:'userId',value:userId,type:String},{key:'partyupId',value:partyupId,type:String}]);cov_thtjuyk11.s[137]++;return(async()=>{cov_thtjuyk11.f[39]++;//DELETE COMMENTARIES FROM PARTYUP
const comments=(cov_thtjuyk11.s[138]++,await Commentary.find({partyup:partyupId}));cov_thtjuyk11.s[139]++;if(comments){cov_thtjuyk11.b[19][0]++;cov_thtjuyk11.s[140]++;comments.map(async()=>{cov_thtjuyk11.f[40]++;cov_thtjuyk11.s[141]++;await Commentary.findOneAndDelete({partyup:partyupId});const _comment=(cov_thtjuyk11.s[142]++,await Commentary.findByIdAndDelete({partyup:partyupId}));});}else{cov_thtjuyk11.b[19][1]++;}//DELETE PARTYUP
const partyup=(cov_thtjuyk11.s[143]++,await Partyup.findById(partyupId));cov_thtjuyk11.s[144]++;if(userId===partyup.user){cov_thtjuyk11.b[20][0]++;cov_thtjuyk11.s[145]++;await Partyup.findByIdAndDelete(partyupId);}else{cov_thtjuyk11.b[20][1]++;}const _partyup=(cov_thtjuyk11.s[146]++,await Partyup.findByIdAndDelete(partyupId));})();},/**
    *
    * @param {string} userId -> The id of the user.
    * @param {string} partyupId -> The id of the partyup.
    * @param {string} text -> The text of the commentary.
    * 
    * @throws {TypeError} On not string data.
    * @throws {Error} On empty or blank data.
    * @throws {TypeError} On not boolean data.
    * @throws {TypeError} On not number data.
    * @throws {TypeError} On not date data.
    * 
    * @returns {Promise} Resolves on correct data, rejects on wrong data.
    */commentPartyup(userId,partyupId,text){cov_thtjuyk11.f[41]++;cov_thtjuyk11.s[147]++;validateLogic([{key:'userId',value:userId,type:String},{key:'partyupId',value:partyupId,type:String},{key:'text',value:text,type:String}]);cov_thtjuyk11.s[148]++;return(async()=>{cov_thtjuyk11.f[42]++;const commentary=(cov_thtjuyk11.s[149]++,await new Commentary({user:userId,partyup:partyupId,text}));cov_thtjuyk11.s[150]++;await commentary.save();})();},/**
     *
     * @param {string} partyupId -> The id of the partyup.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */retrieveComments(partyupId){cov_thtjuyk11.f[43]++;cov_thtjuyk11.s[151]++;validateLogic([{key:'partyupId',value:partyupId,type:String}]);cov_thtjuyk11.s[152]++;return(async()=>{cov_thtjuyk11.f[44]++;const comments=(cov_thtjuyk11.s[153]++,await Commentary.find({partyup:partyupId},{__v:0}).populate('user',{password:0,__v:0}).lean());cov_thtjuyk11.s[154]++;if(!comments){cov_thtjuyk11.b[21][0]++;cov_thtjuyk11.s[155]++;throw new NotFoundError(`partyup with id ${partyupId} not have comments`);}else{cov_thtjuyk11.b[21][1]++;}cov_thtjuyk11.s[156]++;comments.forEach(comment=>{cov_thtjuyk11.f[45]++;cov_thtjuyk11.s[157]++;if(comment.user._id){cov_thtjuyk11.b[22][0]++;cov_thtjuyk11.s[158]++;comment.user.id=comment.user._id.toString();cov_thtjuyk11.s[159]++;delete comment.user._id;}else{cov_thtjuyk11.b[22][1]++;}cov_thtjuyk11.s[160]++;comment.id=comment._id.toString();cov_thtjuyk11.s[161]++;delete comment._id;cov_thtjuyk11.s[162]++;comment.partyup=comment.partyup.toString();});cov_thtjuyk11.s[163]++;return comments;})();},/**
     *
     * @param {string} userId -> The id of the user.
     * @param {string} text -> The text of the commentary.
     * 
     * @throws {TypeError} On not string data.
     * @throws {Error} On empty or blank data.
     * @throws {TypeError} On not boolean data.
     * @throws {TypeError} On not number data.
     * @throws {TypeError} On not date data.
     * 
     * @returns {Promise} Resolves on correct data, rejects on wrong data.
     */deleteComment(commentId,userId){cov_thtjuyk11.f[46]++;cov_thtjuyk11.s[164]++;validateLogic([{key:'commentId',value:commentId,type:String},{key:'userId',value:userId,type:String}]);cov_thtjuyk11.s[165]++;return(async()=>{cov_thtjuyk11.f[47]++;const comment=(cov_thtjuyk11.s[166]++,await Commentary.findById(commentId));cov_thtjuyk11.s[167]++;if(userId==comment.user){cov_thtjuyk11.b[23][0]++;cov_thtjuyk11.s[168]++;await Commentary.findByIdAndDelete(comment.id);const _comment=(cov_thtjuyk11.s[169]++,await Commentary.findByIdAndDelete(comment.id));}else{cov_thtjuyk11.b[23][1]++;}})();}});cov_thtjuyk11.s[170]++;module.exports=logic;